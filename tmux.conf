# : << EOF

# tmux-256color instead of screen-256color enables italics
set-option -g default-terminal "tmux-256color"
# Allow strike-through in Tmux
set-option -as terminal-overrides ',*:smxx=\E[9m'
# Tc enables true color
set -ag terminal-overrides ",*256col*:colors=256:Tc"

set -g escape-time 0
unbind-key C-b

set-option -g prefix C-Space
bind-key m set-window-option synchronize-panes

set-option -g @ssh-split-verbose "true"
set-option -g @ssh-split-h-key "s"
set-option -g @ssh-split-v-key "i"
set-option -g @ssh-split-keep-cwd "true"
set-option -g @ssh-split-keep-remote-cwd "true"
set-option -g @ssh-split-strip-cmd "true"

# Reload tmux.conf with prefix-r
bind C-t source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# setw -g mode-keys vi
# Bind escape to copy mode
unbind [
bind v copy-mode
bind-key k copy-mode \; send-keys -X cursor-up
bind-key K copy-mode \; send-keys -X cursor-up

# Start window numbering at 1 (default => 0)
set -g base-index 1

set-option -g allow-rename off

set -g focus-events on

# mouse
set-option -g mouse on

bind-key Space resize-pane -Z
bind-key / copy-mode \; command-prompt -p " Search up" "send -X search-backward \"%%%\""
bind-key  -T copy-mode-vi / command-prompt -p " Search up" "send -X search-backward \"%%%\""

# Search back to last prompt (mnemonic: "[b]ack"); searches for non-breaking
unbind b
bind-key b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "\\$~"\; send-keys -X next-word

# Navigate to previous/next prompt
bind-key -T copy-mode [ send-keys -X search-backward "\\$~"\; send-keys -X next-word
bind-key -T copy-mode ] send-keys -X search-forward "\\$~"\; send-keys -X next-word


# Smart pane switching with awareness of vim splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Resize pane with arrows keys
unbind -n C-Left
unbind -n C-Down
unbind -n C-Up
unbind -n C-Right
bind-key -n C-Left if-shell "$is_vim" 'send-keys C-Left' 'resize-pane -L 6'
bind-key -n C-Down if-shell "$is_vim" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if-shell "$is_vim" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if-shell "$is_vim" 'send-keys C-Right' 'resize-pane -R 6'


bind c-l if-shell -b -t right "tmux set-buffer -b panedir #{pane_current_path}" "paste-buffer -db panedir"
bind c-h if-shell -b -t left "tmux set-buffer -b panedir #{pane_current_path}" "paste-buffer -db panedir"

# Alt-h: Previous window
bind -n M-h prev
bind -n M-H prev
# Alt-l: Next window
bind -n M-l next
bind -n M-L next
# Alt-n: New window
bind -n M-n new-window -a -c "#{pane_current_path}"
# ctrl-space > move window
bind-key -r < swap-window -t -
bind-key -r > swap-window -t +


bind-key c new-window -c "#{pane_current_path}"
bind-key D detach-client -a

set -g set-titles on

set-option -g visual-activity off

#set inactive/active window styles
set-option -g status on                # turn the status bar on
set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
set-option -g history-limit 100000
set -g status-justify left
setw -g window-status-separator ""

bind-key P command-prompt -p 'save history to filename:' -I '/tmp/tmux.history' 'capture-pane -S -; save-buffer %1 ; delete-buffer'

#
# DESIGN
#

# DESIGN: PANES
set -g pane-active-border-style fg=colour250,bg=colour15
set -g pane-border-style fg=colour250,bg=colour15

# DESIGN: MESSAGING
set -g message-command-style fg=colour8,bg=colour7
set -g message-style fg=colour8,bg=colour7

# DESIGN: STATUSBAR BOTTOM
set -g status-style fg=colour8,bg=colour7
set -g status-interval 2
set -g status-position bottom

set -g status-bg colour7

# DESIGN: WINDOW STATUS
setw -g window-status-format " #[fg=colour8]#[bg=colour59] #I #[fg=colour58]#[bg=colour188] #W #{?window_zoomed_flag,üîç ,}#{?pane_synchronized,‚Üî ,}"
setw -g window-status-current-format " #[fg=colour7]#[bg=colour124] #I #[fg=colour59]#[bg=colour188] #W #{?window_zoomed_flag,üîç ,}#{?pane_synchronized,‚Üî ,}"

set -g status-right-length 50
set -g status-left-length 20

# items left to the tabs
set -g status-left ''
# items right to the tabs
set -g status-right ' '


####

setw -g xterm-keys on

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
# bind-key -T copy-mode-vi WheelUpPane select-pane\; send-keys -t{mouse} -X clear-selection\; send-keys -t{mouse} -X -N 3 scroll-up
# bind-key -T copy-mode-vi WheelDownPane select-pane\; send-keys -t{mouse} -X clear-selection\; send-keys -t{mouse} -X -N 3 scroll-down

# Stay in copy mode on drag end.
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Use v to trigger selection
bind-key -T copy-mode-vi v send-keys -X begin-selection

# Use y to yank current selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xsel -i -p && xsel -o -p | xsel -i -b" \; \
  send -X copy-selection-and-cancel

# Use Y to yank current command (omit the start)
bind-key -T copy-mode-vi Y send-keys -X clear-selection \; send-keys -X start-of-line \; \
  send-keys -X cursor-right \; send-keys -X cursor-right \; send-keys -X begin-selection \; \
  send-keys -X end-of-line \; send-keys -X cursor-left

bind-key -T copy-mode-vi H send-keys -X start-of-line
bind-key -T copy-mode-vi L send-keys -X end-of-line

# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set -w -g wrap-search off

bind \; command-prompt

# save to clipboard on Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe "xsel -i -p && xsel -o -p | xsel -i -b" \; send -X copy-selection-and-cancel

set -g @resurrect-processes 'ssh tail'

set -g @extrakto_insert_key "enter"
set -g @extrakto_copy_key "tab"
set -g @extrakto_key "f"
set -g @extrakto_split_direction "v"
set -g @extrakto_grab_area "window 50"
set -g @extrakto_clip_tool "xsel --input --clipboard || true" # works better for nvim

run-shell ~/.tmux-resurrect/resurrect.tmux
run-shell ~/.tmux-extrakto/extrakto.tmux
run-shell ~/.tmux-ssh-split/ssh-split.tmux

# copy current directory to clipboard
bind . run "~/.tmux-ssh-split/scripts/tmux-ssh-split.sh --get-path"

# Ms modifies OSC 52 clipboard handling to work with mosh, see
# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
# set -ag terminal-overrides "vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"
set-option -ag terminal-overrides ",*256col*:Ms=\\E]52;c;%p2%s\\7"

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

set-option -g allow-passthrough on

# copy conda env from init shell (where tm is first invoked)
set-option -ga update-environment 'CONDA_DEFAULT_ENV'

# switch to last session
bind C-b switch-client -l

# break pane into window
bind-key ! break-pane

# scratch pads
bind-key -n M-p if-shell -F "#{==:#{session_name},ppt}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Python pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s ppt bash -c \"tmux set status off; `tmux show-option -gqv "@CONDA_ENV"`python3\""   }
bind-key -n M-g if-shell -F "#{==:#{session_name},scc}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Scratch pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s scc"   }

bind -T prefix a display-menu -T '#[align=centre,fg=color0,bg=color248] #{host_short} ' -x C -y C \
    'Python                            '               p 'if-shell -F "#{==:#{session_name},ppt}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Python pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s ppt bash -c \"tmux set status off; `tmux show-option -gqv "@CONDA_ENV"`python3\""   }' \
    "#{?#{==:#{@CONDA_ENV},},-,}env activate #{@CONDA_ENV}"  c 'send-keys "cd `tmux show-option -gqv "@CONDA_ENV"`../..; source ./env.sh ; cd -" Enter' \
    '' \
    "#{?#{==:#{@CONDA_ENV},},-,}Nvtop"               n  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color002] nvtop " -w 50% -h 50% -E "`tmux show-option -gqv "@CONDA_ENV"`nvtop"' \
    'Htop'                h  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color002] htop " -w 50% -h 50% -E "htop"' \
    '' \
    'Switch client'       t  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color001] switch client to " -w 80% -h 80% -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\" | grep -v "ppt" | grep -v "scc" | fzf --reverse | xargs -I {} tmux switch-client -c #{client_name} -t {}"' \
    'Break pane'          b  'break-pane' \
    "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
    "Rename session"                          r "command-prompt -I '#S' -p '(rename session)' \"rename-session '%%'\"" \
    '' \
    "Swap Pane Up"                       < "swap-pane -U" \
    "Swap Pane Down"                     > "swap-pane -D" \
    "#{?pane_marked,Unmark,Mark}"                                    m    "select-pane -m" \
    "#{?pane_marked_set,,-}Swap Marked pane"                              s     swap-pane \
    "#{?pane_marked_set,,-}Swap Marked window" S swap-window \
    '' \
    'Kill Pane'           k  kill-pane                                                     \
    'Kill Window'         K  kill-window                                                     \
    '' \
    'Close menu'          q ''

bind-key -n M-/ display-menu -x W -y S -T '#[fg=colour4]Readline Bindings' \
    "" "#[fg=colour1]Changing Text" "" "" "" \
    "Transpose words"                         M-t "send-keys M-t" \
    "" "#[fg=colour1]Cutting and Pasting" "" "" "" \
    "Kill (cut) backwards to the start of the line"                                C-u  "send-keys C-u" \
    "Kill (cut) forwards to the end of the current word"                           M-d  "send-keys M-d" \
    "Kill (cut) backwards to the start of the current word"                        C-w  "send-keys C-w" \
    "Yank (paste) the top of the kill ring"                                        C-y  "send-keys C-y" \
    "Rotate the kill ring, and yank (paste) the new top. Only works after a yank"  M-y  "send-keys M-y" \
    "" "#[fg=colour1]History" "" "" "" \
    "Insert the last argument to the previous command"    M-.   "send-keys M-." \

# set -g window-status-format '#I:#W#{?window_flags,#{window_flags}, }#[range=user|kill#{window_id}](X)#[norange]'
# set -g window-status-current-format '#{E:window-status-format}'
# bind -Troot MouseDown1Status if -F '#{==:#{mouse_status_range},window}' {
#         select-window
# } {
#         if -F '#{m/r:^kill,#{mouse_status_range}}' {
#                 run -C 'kill-window -t#{s/^kill//:mouse_status_range}'
#         }
# }

set -g status-right '#{@gpu_info}'
run 'cut -c3- ~/.tmux.conf | bash -s '
# -- custom variables ----------------------------------------------------------

# to define a custom #{foo} variable, define a POSIX shell function between the
# '# EOF' and the '# "$@"' lines. Please note that the opening brace { character
# must be on the same line as the function name otherwise the parse won't detect
# it.
#
# # /!\ do not remove the following line
# EOF
#
# # /!\ do not "uncomment" the functions: the leading "# " characters are needed
#
#
# gpu_info_func() {
# if ! command -v nvidia-smi &> /dev/null; then exit 0; fi
# num_gpus=$(nvidia-smi --query-gpu=count --format=csv,noheader,nounits)
# bgcolor=colour07
# fgcolor_low=green
# fgcolor_mid=orange
# fgcolor_high=red
# while true
# do
# info=""
# # Loop through all available GPUs
# for ((gpu_id = 0; gpu_id < num_gpus; gpu_id++)); do
# 
#     # Get GPU information including name, memory usage, and total memory
#     gpu_info=$(nvidia-smi --query-gpu=gpu_name,memory.used,memory.total --format=csv,noheader -i $gpu_id)
# 
#     # Extract GPU name, memory usage, and total memory
#     gpu_name=$(echo "$gpu_info" | cut -d ',' -f 1 | sed 's/NVIDIA //g')
#     memory_used=$(echo "$gpu_info" | cut -d ',' -f 2)
#     memory_total=$(echo "$gpu_info" | cut -d ',' -f 3)
# 
#     memory_used_nounit=$(echo "$memory_used" | sed 's/[^0-9]*//g' )
#     memory_total_nounit=$(echo "$memory_total" |  sed 's/[^0-9]*//g' )
# 
#     # Calculate memory usage percentage
#     usage_percentage=$(echo "scale=2; $memory_used_nounit / $memory_total_nounit * 100" | bc)
# 
#     # Calculate the number of bars based on memory usage
#     bars=7
#     bar_count=$(echo "scale=0; $usage_percentage * $bars / 100" | bc)
# 
#     # Map memory usage to bars
#     if ((bar_count == 0)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÅ#[fg=color0]"
#     elif ((bar_count == 1)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÇ#[fg=color0]"
#     elif ((bar_count == 2)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÉ#[fg=color0]"
#     elif ((bar_count == 3)); then
#         bars="#[fg=$fgcolor_mid]#[bg=$bgcolor]‚ñÑ#[fg=color0]"
#     elif ((bar_count == 4)); then
#         bars="#[fg=$fgcolor_mid]#[bg=$bgcolor]‚ñÖ#[fg=color0]"
#     elif ((bar_count == 5)); then
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñÜ#[fg=color0]"
#     elif ((bar_count == 6)); then
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñá#[fg=color0]"
#     else
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñà#[fg=color0]"
#     fi
# 
#     # Print the GPU information
#     info="$info $bars ${usage_percentage%.*}% $gpu_name:$gpu_id"
# done
# echo $info
# sleep 1s
# tmux set-option -gq "@gpu_info" "$info"
# sleep 10s
# done
# }
# nohup gpu_info_func > /dev/null 2>&1 & disown
#
# "$@"
# # /!\ do not remove the previous line
