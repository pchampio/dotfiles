# : << EOF



# tmux-256color instead of screen-256color enables italics
set-option -g default-terminal "tmux-256color"
# Allow strike-through in Tmux
set-option -as terminal-overrides ',*:smxx=\E[9m'
# Tc enables true color
set -ag terminal-overrides ",*256col*:colors=256:Tc"

set -g escape-time 0
unbind-key C-b

set-option -g prefix C-Space
bind-key m set-window-option synchronize-panes

set-option -g @ssh-split-verbose "true"
set-option -g @ssh-split-h-key "s"
set-option -g @ssh-split-v-key "i"
set-option -g @ssh-split-keep-cwd "true"
set-option -g @ssh-split-keep-remote-cwd "true"
set-option -g @ssh-split-strip-cmd "true"

# Reload tmux.conf with prefix-r
bind C-t source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

unbind [
bind v copy-mode -H
bind-key k copy-mode -H \; send-keys -X cursor-up
bind-key K copy-mode -H \; send-keys -X cursor-up

# Start window numbering at 1 (default => 0)
set -g base-index 1
set-option -g pane-base-index 1

set-option -g allow-rename off

set -g focus-events on

# mouse
set-option -g mouse on

bind-key Space resize-pane -Z

# escape from search using escape!
set-option -g status-keys emacs

# turn on incremental search in vi mode (it's already the default in emacs mode).
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
  send-keys -X search-backward-incremental "%%"
}

# Make "/" and "?" work without going into copy mode first.
bind-key ? {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
    send-keys -X search-forward-incremental "%%"
  }
}
bind-key / {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
    send-keys -X search-backward-incremental "%%"
  }
}

# --- Hidden option to toggle "back-prompt" mode (1) vs normal (0) ---
set-option -g @BACK_PROMPT 0

# --- Root mode: bind 'b' to enter copy-mode, search previous prompt, cursor up, set back-prompt=1 ---
unbind-key b
bind-key b copy-mode -H \; \
  send -X previous-prompt -o \; \
  send -X cursor-up \; \
  set-option -g @BACK_PROMPT 1

# --- copy-mode-vi: 'b' does prompt-jump when in back-prompt=1, else back-word ---
bind-key -T copy-mode-vi b if-shell -F '#{==:#{@BACK_PROMPT},1}' \
  "send -X previous-prompt -o; send -X cursor-up; send -X start-of-line ; set-option -g @BACK_PROMPT 1" \
  "send -X previous-word"

# --- copy-mode-vi: 'B' does double prompt-jump when in back-prompt=1, else double back-word ---
bind-key -T copy-mode-vi B if-shell -F '#{==:#{@BACK_PROMPT},1}' \
  "send -X next-prompt -o; send -X next-prompt -o; send -X cursor-up ; send -X start-of-line ; set-option -g @BACK_PROMPT 1" \
  "send -X previous-space"

# Add : / to the default list (" -_@") of word separators.
# set-option -g word-separators " -_@:/"

bind -T copy-mode-vi Escape set-option -g @BACK_PROMPT 0 \; send -X cancel
bind -T copy-mode-vi q set-option -g @BACK_PROMPT 0 \; send -X cancel


# Smart pane switching with awareness of vim splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(fzf|atuin|proxget|view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Resize pane with arrows keys
unbind -n C-Left
unbind -n C-Down
unbind -n C-Up
unbind -n C-Right
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5


# Alt-h: Previous window
bind -n M-h prev
bind -n M-H prev
# Alt-l: Next window
bind -n M-l next
bind -n M-L next
# Alt-n: New window
bind -n M-n new-window -a -c "#{pane_current_path}"
# ctrl-space > move window
bind-key -r < swap-window -t -
bind-key -r > swap-window -t +

# search windows in current session
bind l display-popup -b rounded -T "#[align=centre,fg=color0,bg=color001] switch window to " -w 30% -h 30% -E "\
    tmux list-windows -F '#{window_index} #{window_name}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-window |\
    cut -d ' ' -f 1 |\
    xargs tmux select-window -t"


bind-key c new-window -c "#{pane_current_path}"
bind-key D detach-client -a

set -g set-titles on

set-option -g visual-activity off

#set inactive/active window styles
set-option -g status on                # turn the status bar on
set-option -g history-limit 100000
set -g status-justify left
setw -g window-status-separator ""

bind-key P command-prompt -p 'save history to filename:' -I '/tmp/tmux.history' 'capture-pane -S -; save-buffer %1 ; delete-buffer'

#
# DESIGN
#

# DESIGN: PANES
set -g pane-active-border-style fg=colour250,bg="#fbf3db"
set -g pane-border-style fg=colour250,bg="#fbf3db"

# DESIGN: MESSAGING
set -g message-command-style fg=colour8,bg=colour7
set -g message-style fg=colour8,bg=colour7

# DESIGN: STATUSBAR BOTTOM
set -g status-style fg=colour8,bg=colour7
set -g status-interval 2
set -g status-position bottom

set -g status-bg colour7

# DESIGN: WINDOW STATUS
setw -g window-status-format " #[fg=colour8]#[bg=colour59] #I #[fg=colour58]#[bg=colour188] #W #{?window_zoomed_flag,üîç ,}#{?pane_synchronized,‚Üî ,}"
setw -g window-status-current-format " #[fg=colour7]#[bg=colour124] #I #[fg=colour59]#[bg=colour188] #W #{?window_zoomed_flag,üîç ,}#{?pane_synchronized,‚Üî ,}"

set -g status-right-length 50
set -g status-left-length 20

# items left to the tabs
set -g status-left ''
# items right to the tabs
set -g status-right ' '


####


# ==============================================
# === SSH NESTING                            ===
# ==============================================
# Source: https://raw.githubusercontent.com/samoshkin/tmux-config/master/tmux/tmux.conf
# We want to have single prefix key usable both for local and remote session
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# see: toggle on/off all keybindings ¬∑ Issue #237 ¬∑ tmux/tmux - https://github.com/tmux/tmux/issues/237
bind -T root F12 \
  set prefix None \;\
  set key-table off \;\
  set status-left '‚òû  Bound to Remote' \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-left \;\
  refresh-client -S

# Bind plain F9 (no prefix) to enter all copy-pane on all panes
bind-key -n F9 run-shell -b "~/dotfiles/bin/.pane-copy-all.sh"

setw -g xterm-keys on

# Stay in copy mode on drag end.
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# -H to hide the top left indicator
bind -n WheelUpPane { if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { copy-mode -H -e } }
bind -n MouseDrag1Pane { if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { copy-mode -H -M } }

bind -Tcopy-mode WheelUpPane { select-pane; send -N3 -X scroll-up }
bind -Tcopy-mode WheelDownPane { select-pane; send -N3 -X scroll-down }
bind -Tcopy-mode-vi WheelUpPane { select-pane; send -N3 -X scroll-up }
bind -Tcopy-mode-vi WheelDownPane { select-pane; send -N3 -X scroll-down }

# Symbolic names for "Vim"-like modes.
%hidden NORMAL=0
%hidden VISUAL=1
%hidden VISUAL_LINE=2
%hidden VISUAL_BLOCK=3

# Override default for `v` (`send-keys -X rectangle-toggle`).
bind-key -T copy-mode-vi v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL_BLOCK}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL_BLOCK or VISUAL_LINE mode, go to vanilla VISUAL mode.
      send-keys -X rectangle-off
      set-option -g @mode $VISUAL
    } {
      # We appear to be in VISUAL mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL mode.
    send-keys -X rectangle-off
    send-keys -X begin-selection
    set-option -g @mode $VISUAL
  }

# Ditto for C-v.
bind-key -T copy-mode-vi C-v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL or VISUAL_LINE mode, go to VISUAL_BLOCK mode.
      send-keys -X rectangle-on
      set-option -g @mode $VISUAL_BLOCK
    } {
      # We appear to be in VISUAL_BLOCK mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_BLOCK mode.
    send-keys -X rectangle-on
    send-keys -X begin-selection
    set-option -g @mode $VISUAL_BLOCK
  }

# Similar for `V`.
bind-key -T copy-mode-vi V if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_BLOCK}}}' {
      # If in VISUAL or VISUAL_BLOCK mode, go to VISUAL_LINE mode.
      # (Sadly, doesn't exactly match Vim's behavior, because it starts a new
      # linewise selection instead of adjusting the existing selection.)
      send-keys -X rectangle-off
      send-keys -X select-line
      set-option -g @mode $VISUAL_LINE
    } {
      # We appear to be in VISUAL_LINE mode; go back to NORMAL mode.
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_LINE mode.
    send-keys -X rectangle-off
    send-keys -X select-line
    set-option -g @mode $VISUAL_LINE
  }


# Use y to yank current selection
bind-key -T copy-mode-vi y set-option -g @BACK_PROMPT 0 \; send-keys -X copy-pipe "env COPY_PROVIDERS=desktop clipboard-provider  copy" \; \
  send -X copy-selection-and-cancel

# Use c to yank current selection and stay in copy mode. (Ctrl-*C* without the Ctrl)
bind-key -T copy-mode-vi c set-option -g @BACK_PROMPT 0 \; send-keys -X copy-pipe "env COPY_PROVIDERS=desktop clipboard-provider  copy" \; \
  send -X copy-selection

# Use Y to select current command (omit the start)
bind-key -T copy-mode-vi Y send-keys -X clear-selection \; send-keys -X start-of-line \; send-keys -X jump-forward \~ \;\
  send-keys -X cursor-right \; send-keys -X cursor-right \; send-keys -X begin-selection \; \
  send-keys -X end-of-line \; send-keys -X cursor-left

bind-key -T copy-mode-vi H send-keys -X start-of-line
bind-key -T copy-mode-vi L send-keys -X end-of-line

bind -Tcopy-mode-vi h set-option -g @BACK_PROMPT 0 \; send -X cursor-left
bind -Tcopy-mode-vi j set-option -g @BACK_PROMPT 0 \; send -X cursor-down
bind -Tcopy-mode-vi k set-option -g @BACK_PROMPT 0 \; send -X cursor-up
bind -Tcopy-mode-vi l set-option -g @BACK_PROMPT 0 \; send -X cursor-right

# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set -w -g wrap-search off

bind \; command-prompt


# search all scrollback for filenames
bind-key g copy-mode -H \; send-keys -X search-backward \
  '(^|/|\<|[[:space:]"])((\.|\.\.)|[[:alnum:]~_"-]*)((/[][[:alnum:]_.#$%&+=@"-]+)+([/ "]|\.([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)(:[0-9]+)?)|(/[][[:alnum:]_.#$%&+=@"-]+){2,}([/ "]|\.([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)(:[0-9]+)?)?|(\.|\.\.)/([][[:alnum:]_.#$%&+=@"-]+(:[0-9]+)?(:[0-9]+)?))'

# `cd` is important in case this is a relative path. `echo | bash` is to perform tilde expansion.
bind-key -T copy-mode-vi o send-keys -X copy-pipe 'cd #{pane_current_path}; xargs -I {} echo "echo {}" | bash | xargs open-in-vim-pane' \; if -F "#{alternate_on}" { send-keys -X cancel }
# save the buffer, then open an editor in the current pane
bind-key -T copy-mode-vi O send-keys -X copy-pipe-and-cancel "xargs -I {} sh -c 'input=\"{}\"; case \"\$input\" in *:[0-9]*) file=\${input%:*}; line=\${input##*:}; tmux send-keys C-q \"\${EDITOR:-nvim} +\$line \\\"\$file\\\"\" C-m ;; *) tmux send-keys C-q \"\${EDITOR:-nvim} \\\"\$input\\\"\" C-m ;; esac'"
# search for the highlighted text
bind-key -T copy-mode-vi s send-keys -X copy-pipe "cd #{pane_current_path}; xargs -I {} open 'https://www.google.com/search?q={}'" \; if -F "#{alternate_on}" { send-keys -X cancel }

%hidden IS_COPY_MODE="#{==:#{pane_mode},copy-mode}"
%hidden COPY_MODE_MARKER="#[align=left#,fg=colour4]‚îÄ‚îÄ‚îÄ  COPY   ‚îÄ‚îÄ‚îÄ#[default]"
%hidden COPY_MODE_LEFT="$COPY_MODE_MARKER"
%hidden HAS_SEARCH_RESULT="#{&&:#{e|>|:#{search_count},0},#{search_present}}"
%hidden RESULT_OR_RESULTS="result#{?#{==:#{search_count},1},,s}"
%hidden RESULT_COUNT_IS_PARTIAL="#{e|>|:#{search_count_partial},0}"
%hidden SEARCH_RESULT_COUNT="(#{search_count}#{?$RESULT_COUNT_IS_PARTIAL,+,} $RESULT_OR_RESULTS)"
%hidden OFFSET_FROM_TOP="#{e|-|:#{history_size},#{scroll_position}}"
%hidden COPY_MODE_LOCATION="[$OFFSET_FROM_TOP/#{history_size}]"
%hidden COPY_MODE_CENTER="#[align=centre#,bg=black]#[default]"

%hidden COPY_MODE_RIGHT="#[align=right#,fg=colour4]  #{?$HAS_SEARCH_RESULT,$SEARCH_RESULT_COUNT  ,}$COPY_MODE_LOCATION  #[default]"

set-option -g pane-border-format "#{?$IS_COPY_MODE,$COPY_MODE_LEFT$COPY_MODE_CENTER$COPY_MODE_RIGHT,}"
set-option -g pane-border-status bottom

bind-key -T copy-mode-vi Escape send-keys -X cancel


set -g @resurrect-processes 'ssh tail'

set -g @extrakto_insert_key "enter"
set -g @extrakto_copy_key "tab"
set -g @extrakto_key "f"
set -g @extrakto_split_direction "p"
set -g @extrakto_grab_area "window 50"
set -g @extrakto_popup_size "50%"
set -g @extrakto_open_tool "vim"
set -g @extrakto_clip_tool "xsel --input --clipboard || true" # works better for nvim

bind-key -n C-f if-shell "$is_vim" 'send-keys C-f'  'run-shell "~/.tmux-extrakto/scripts/open.sh #{pane_id}"'
# bind-key -n C-f run-shell "~/.tmux-extrakto/scripts/open.sh #{pane_id}"

set -g @thumbs-key F

set -g @tmux-last-prompt-pattern '\$~\s'
set -g @tmux-last-key B

run-shell ~/.tmux-resurrect/resurrect.tmux
run-shell ~/.tmux-extrakto/extrakto.tmux
run-shell ~/.tmux-ssh-split/ssh-split.tmux
run-shell ~/.tmux-thumbs/tmux-thumbs.tmux
run-shell ~/.tmux-last/tmux-last.tmux

# copy current directory to clipboard
bind . run "~/.tmux-ssh-split/scripts/tmux-ssh-split.sh --get-path"

set-option -ag terminal-overrides ",*256col*:Ms=\\E]52;c;%p2%s\\7"

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

set-option -g allow-passthrough on

# copy conda env from init shell (where tm is first invoked)
set-option -ga update-environment 'CONDA_DEFAULT_ENV'

# break pane into window
bind-key _ break-pane

# scratch pads
bind-key -n M-p if-shell -F "#{==:#{session_name},ppt}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Python pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s ppt bash -c \"tmux set status off; `tmux show-option -gqv "@CONDA_ENV_'#S'"`python3\""   }
bind-key -n M-g if-shell -F "#{==:#{session_name},scc}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Scratch pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s scc"   }

bind -T prefix a display-menu -T '#[align=centre,fg=color0,bg=color248] #{host_short} ' -x C -y C \
    'Python                            '               p 'if-shell -F "#{==:#{session_name},ppt}" {     detach-client  } {       display-popup -b rounded -S "fg=colour001" -E -h 65% -w 65% -T "#[align=centre,fg=color0,bg=color248] Python pad "  "tmux new-session -c \"#{?pane_path,#{pane_path},#{pane_current_path}}\" -A -s ppt bash -c \"tmux set status off; `tmux show-option -gqv "@CONDA_ENV_'#S'"`python3\""   }' \
    "#{?#{==:#{@CONDA_ENV}#S,},-,}env activate #{@CONDA_ENV}#S"  c 'send-keys " __cd `tmux show-option -gqv "@CONDA_ENV_'#S'"`../..; source ./env.sh ; __cd -" Enter' \
    '' \
    "#{?#{==:#{@CONDA_ENV}#S,},-,}Nvtop"               n  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color002] nvtop " -w 50% -h 50% -E "`tmux show-option -gqv "@CONDA_ENV_'#S'"`nvtop"' \
    'Htop'                h  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color002] htop " -w 70% -h 50% -E "htop --sort-key=PERCENT_CPU"' \
    '' \
    'Switch client'       t  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color001] switch client to " -w 30% -h 30% -E "tmux list-sessions | sed -E \"s/:.*$//\" | grep -v \"^$(tmux display-message -p '#S')\" | grep -v \"ppt\" | grep -v \"scc\" | fzf --reverse --print-query | xargs -I {} sh -c \"tmux has-session -t {} || tmux new-session -d -s {}; tmux switch-client -c #{client_name} -t {}\""' \
    'Switch window'       l  'display-popup -b rounded -T "#[align=centre,fg=color0,bg=color001] switch window to " -w 30% -h 30% -E "tmux list-windows -F \"##{window_index} ##{window_name}\"|  sed \"/^$/d\" |fzf --reverse | cut -d \" \" -f 1 | xargs tmux select-window -t "' \
    'Break pane'          _  'break-pane' \
    "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
    "Rename session"                          r "command-prompt -I '#S' -p '(rename session)' \"rename-session '%%'\"" \
    "Detach client"                          d "detach-client" \
    '' \
    "Find in pane extrakto/fzf"                          f "run-shell \"~/.tmux-extrakto/scripts/open.sh #{pane_id}\"" \
    "Find in pane thumbs/hints"                          F "thumbs-pick" \
    "Find path:line in pane"                             g "copy-mode -H \; send-keys -X search-backward  '(^|/|\<|[[:space:]\"])((\.|\.\.)|[[:alnum:]~_\"-]*)((/[][[:alnum:]_.#$%&+=@\"-]+)+([/ \"]|\.([][[:alnum:]_.#$%&+=@\"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@\"-]+(:[0-9]+)(:[0-9]+)?)|(/[][[:alnum:]_.#$%&+=@\"-]+){2,}([/ \"]|\.([][[:alnum:]_.#$%&+=@\"-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&+=@\"-]+(:[0-9]+)(:[0-9]+)?)?|(\.|\.\.)/([][[:alnum:]_.#$%&+=@\"-]+(:[0-9]+)?(:[0-9]+)?))'" \
    "Back to previous prompt"                          b "" \
    "Open last output in nvim"                         B "new-window -e COLOR= -e "PROMPT_PATTERN='\\$~\\s'" -n last-command-output ~/.tmux-last/plugin.sh" \
    "Capture pane"                         P "command-prompt -p 'save history to filename:' -I '/tmp/tmux.history' 'capture-pane -S -; save-buffer %1 ; delete-buffer'" \
    '' \
    "Swap Pane Up"                       < "swap-pane -U" \
    "Swap Pane Down"                     > "swap-pane -D" \
    "#{?pane_marked,Unmark,Mark}"                                    m    "select-pane -m" \
    "#{?pane_marked_set,,-}Swap Marked pane"                              s     swap-pane \
    "#{?pane_marked_set,,-}Swap Marked window" S swap-window \
    '' \
    'Kill Pane'           k  kill-pane                                                     \
    'Kill Window'         K  kill-window                                                     \
    '' \
    'Close menu'          q ''

bind-key -n M-/ display-menu -x W -y S -T '#[fg=colour4]Readline Bindings' \
    "" "#[fg=colour1]Changing Text" "" "" "" \
    "Transpose words"                         M-t "send-keys M-t" \
    "" "#[fg=colour1]Cutting and Pasting" "" "" "" \
    "Kill (cut) backwards to the start of the line"                                C-u  "send-keys C-u" \
    "Kill (cut) forwards to the end of the current word"                           M-d  "send-keys M-d" \
    "Kill (cut) backwards to the start of the current word"                        C-w  "send-keys C-w" \
    "Yank (paste) the top of the kill ring"                                        C-y  "send-keys C-y" \
    "Rotate the kill ring, and yank (paste) the new top. Only works after a yank"  M-y  "send-keys M-y" \
    "" "#[fg=colour1]History" "" "" "" \
    "Insert the last argument to the previous command"    M-.   "send-keys M-." \

# set -g window-status-format '#I:#W#{?window_flags,#{window_flags}, }#[range=user|kill#{window_id}](X)#[norange]'
# set -g window-status-current-format '#{E:window-status-format}'
# bind -Troot MouseDown1Status if -F '#{==:#{mouse_status_range},window}' {
#         select-window
# } {
#         if -F '#{m/r:^kill,#{mouse_status_range}}' {
#                 run -C 'kill-window -t#{s/^kill//:mouse_status_range}'
#         }
# }

# set -g status-right '#{@gpu_info}'
# run 'cut -c3- ~/.tmux.conf | bash -s '
# -- custom variables ----------------------------------------------------------

# to define a custom #{foo} variable, define a POSIX shell function between the
# '# EOF' and the '# "$@"' lines. Please note that the opening brace { character
# must be on the same line as the function name otherwise the parse won't detect
# it.
#
# # /!\ do not remove the following line
# EOF
#
# # /!\ do not "uncomment" the functions: the leading "# " characters are needed
#
#
# gpu_info_func() {
# if ! command -v nvidia-smi &> /dev/null; then exit 0; fi
# num_gpus=$(nvidia-smi --query-gpu=count --format=csv,noheader,nounits)
# bgcolor=colour07
# fgcolor_low=green
# fgcolor_mid=orange
# fgcolor_high=red
# while true
# do
# info=""
# # Loop through all available GPUs
# for ((gpu_id = 0; gpu_id < num_gpus; gpu_id++)); do
# 
#     # Get GPU information including name, memory usage, and total memory
#     gpu_info=$(nvidia-smi --query-gpu=gpu_name,memory.used,memory.total --format=csv,noheader -i $gpu_id)
# 
#     # Extract GPU name, memory usage, and total memory
#     gpu_name=$(echo "$gpu_info" | cut -d ',' -f 1 | sed 's/NVIDIA //g')
#     memory_used=$(echo "$gpu_info" | cut -d ',' -f 2)
#     memory_total=$(echo "$gpu_info" | cut -d ',' -f 3)
# 
#     memory_used_nounit=$(echo "$memory_used" | sed 's/[^0-9]*//g' )
#     memory_total_nounit=$(echo "$memory_total" |  sed 's/[^0-9]*//g' )
# 
#     # Calculate memory usage percentage
#     usage_percentage=$(echo "scale=2; $memory_used_nounit / $memory_total_nounit * 100" | bc)
# 
#     # Calculate the number of bars based on memory usage
#     bars=7
#     bar_count=$(echo "scale=0; $usage_percentage * $bars / 100" | bc)
# 
#     # Map memory usage to bars
#     if ((bar_count == 0)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÅ#[fg=color0]"
#     elif ((bar_count == 1)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÇ#[fg=color0]"
#     elif ((bar_count == 2)); then
#         bars="#[fg=$fgcolor_low]#[bg=$bgcolor]‚ñÉ#[fg=color0]"
#     elif ((bar_count == 3)); then
#         bars="#[fg=$fgcolor_mid]#[bg=$bgcolor]‚ñÑ#[fg=color0]"
#     elif ((bar_count == 4)); then
#         bars="#[fg=$fgcolor_mid]#[bg=$bgcolor]‚ñÖ#[fg=color0]"
#     elif ((bar_count == 5)); then
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñÜ#[fg=color0]"
#     elif ((bar_count == 6)); then
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñá#[fg=color0]"
#     else
#         bars="#[fg=$fgcolor_high]#[bg=$bgcolor]‚ñà#[fg=color0]"
#     fi
# 
#     # Print the GPU information
#     info="$info $bars ${usage_percentage%.*}% $gpu_name:$gpu_id"
# done
# echo $info
# sleep 1s
# tmux set-option -gq "@gpu_info" "$info"
# sleep 10s
# done
# }
# gpu_info_func
# nohup gpu_info_func > /dev/null 2>&1 & disown
#
# "$@"
# # /!\ do not remove the previous line
