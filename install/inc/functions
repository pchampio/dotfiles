#!/bin/bash
# Stolen from : https://github.com/Grafikart/dotfiles

tell() {
  printf "\033[1;33m|-- ${*}\033[0m\n"
  printf "\033[0;31m" 1>&2 ;
  $* || {
    printf "\033[0m"
  }
}

explain() {
  printf "\033[1;34m${1}\033[0m\n"
}

explain2() {
  printf "\033[1;33m|-- ${1}\033[0m\n"
}

success() {
  printf "\033[1;32m${1}\033[0m\n"
}

error() {
  printf "\033[1;31m${1}\033[0m\n"
}

run_with_spinner() {
    local cmd="${*}"
    local logfile="/tmp/command_$(date +%s).log"
    local spinner='|/-\'
    local i=0
    local pid pgid

    explain2 "$cmd"
    [ -f /tmp/log_install_last ] && rm /tmp/log_install_last
    ln -s "$logfile" /tmp/log_install_last

    # Run the command in a separate process group
    bash -c "$cmd" &> "$logfile" &
    pid=$!
    pgid=$(ps -o pgid= "$pid" | tr -d ' ')

    # Trap Ctrl-C: kill the entire process group (bash -c and all its children)
    trap '
        printf "\n"
        echo "Aborted by user. Killing process group $pgid..."
        kill -TERM -$pgid 2>/dev/null
        wait $pid 2>/dev/null
        return 130
    ' INT

    # Spinner loop
    while kill -0 "$pid" 2>/dev/null; do
        i=$(( (i+1) % 4 ))
        printf "\r[%c] " "${spinner:$i:1}"
        sleep 0.1
    done

    # Wait for completion
    wait "$pid"
    local cmdstatus=$?

    # Clear spinner and trap
    trap - INT
    printf "\r"

    if [ $cmdstatus -ne 0 ]; then
        error "Command failed with exit code ${status}:"
        tail -n 10 "$logfile"
        echo "Full log available at: $logfile"
    fi

    return $cmdstatus
}

apply_sed_to_dotfiles() {
    local dotfiles="$HOME"
    local configs=("zshrc" "bashrc" "profile" "zprofile" "zshenv" "bash_profile")
    local file fullpath

    for file in "${configs[@]}"; do
        fullpath="$dotfiles/.$file"
        if [[ -f "$fullpath" ]]; then
            sed -i "$1" $(realpath "$fullpath")
            # clean up empty last lines
            sed -i ':a;/^\n*$/{$d;N;ba}' $(realpath "$fullpath")
        fi
    done
}
